{"version":3,"sources":["components/Cards/Cards.module.css","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png","api/index.js","components/Delta/Delta.jsx","components/Cards/IndividualCard.jsx","components/Cards/Cards.jsx","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Footer/Footer.jsx","components/DataTable/DataTable.js","components/Header/Header.jsx","components/Table/Table.js","App.js","index.js"],"names":["module","exports","url","fetchCountryData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Delta","inpCnt","color","size","fromCard","className","fontSize","start","end","duration","separator","Info","value","subHead","deltaconfirmed","deltaColor","useState","raised","setRaised","Grid","item","xs","md","Card","onMouseOver","onMouseOut","temp","cx","styles","card","infected","newCard","temperatureClassname","CardContent","Typography","variant","gutterBottom","mainTitle","component","countCard","num","digits","i","si","symbol","length","toFixed","replace","nFormatter","cardObj","subhead","totData","deltadeaths","deltarecovered","cardsRender","cardValue","delta","dColor","Fragment","key","IndividualCard","container","spacing","justify","refreshDate","Date","toDateString","Chart","graphData","dataset","title","isGraphDataArr","Array","isArray","label","borderColor","fill","backgroundColor","lineChart","labels","datasets","options","display","text","maintainAspectRatio","barChart","legend","arr","Countries","handleCountryChange","setCountries","useEffect","count","len","push","fetchAPI","FormControl","formControl","defaultValue","placeholder","isSearchable","onChange","selectedOption","style","width","Footer","makeStyles","theme","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","align","href","target","rel","useStyles","root","bottom","right","appBar","toolBar","alignItems","justifyContent","ScrollTop","props","children","window","classes","trigger","useScrollTrigger","undefined","disableHysteresis","threshold","Zoom","in","onClick","event","anchor","ownerDocument","document","querySelector","scrollIntoView","behavior","block","role","BackToTop","CssBaseline","AppBar","Toolbar","src","covidLogo","alt","id","Fab","aria-label","Table","App","state","setState","this","Container","Box","my","CountryPicker","Cards","React","Component","ReactDOM","render","getElementById"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,sBAAsB,UAAY,yBAAyB,UAAY,yBAAyB,QAAU,uBAAuB,YAAc,6B,oBCAlTD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,oBCA7DD,EAAOC,QAAU,CAAC,UAAY,2B,oBCA9BD,EAAOC,QAAU,CAAC,YAAc,qC,oBCDhCD,EAAOC,QAAU,IAA0B,mC,0SCErCC,EAAM,iCA6BCC,EAAgB,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DAC1BC,EAAiBF,EAAD,UAAoBF,EAApB,sBAAqCE,GAA1BF,EADD,kBAG2CK,IAAMC,IAAIF,GAHrD,2BAGlBG,KAAQC,EAHU,EAGVA,UAAWC,EAHD,EAGCA,UAAWC,EAHZ,EAGYA,OAAQC,EAHpB,EAGoBA,WAHpB,kBAInB,CAAEH,YAAWC,YAAWC,SAAQC,eAJb,kCAM1BC,QAAQC,IAAI,UAAZ,MAN0B,0DAAH,sDAUhBC,EAAc,uCAAG,gCAAAX,EAAA,+EAEDE,IAAMC,IAAN,UAAaN,EAAb,WAFC,uBAEhBO,EAFgB,EAEhBA,KACFQ,EAAeR,EAAKS,KAAI,SAAAC,GAAS,MAAK,CACxCT,UAAWS,EAAUT,UAAUU,MAC/BR,OAAQO,EAAUP,OAAOQ,MACzBC,KAAMF,EAAUG,eANI,kBAQjBL,GARiB,gCAUxBH,QAAQC,IAAI,UAAZ,MAVwB,yDAAH,qDAcdQ,EAAc,uCAAG,8BAAAlB,EAAA,+EAEYE,IAAMC,IAAN,UAAaN,EAAb,eAFZ,uBAEVsB,EAFU,EAElBf,KAAQe,UAFU,kBAInBA,EAAUN,KAAI,SAACd,GAAD,OAAaA,EAAQqB,SAJhB,wHAAH,qD,4IClCZC,G,OAfD,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAClC,OACI,oCACI,yBAAKC,UAAWD,EAAQ,QAAa,MACrC,0BAAMC,UAAS,qBAAgBH,EAAhB,uBAAoCC,IAC/C,kBAAC,IAAD,CAAkBG,SAAS,QAAQD,UAAWD,EAAQ,qBAAiBD,EAAjB,4BAAyCA,GAAzC,qBACxCA,EADwC,4BAChBA,EADgB,wBAGtD,kBAAC,IAAD,CAASI,MAAO,EAAGC,IAAKP,GAAkB,EAAGQ,SAAU,IAAKC,UAAU,MAAO,SCmE9EC,EA1EF,SAAC,GAA0D,IAAxDZ,EAAuD,EAAvDA,KAAMa,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,WAAiB,EACzCC,oBAAS,GADgC,mBAC9DC,EAD8D,KACtDC,EADsD,KA0CrE,OACE,oCACE,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CACAC,YAAa,WAzCjBN,GAAU,IA0CNO,WAAY,WAtChBP,GAAU,IAuCND,OAAQA,EACRZ,UArCN,SAA8BqB,GAE5B,OAAQA,GACN,IAAK,WAAY,OAAOC,IAAGC,IAAOC,KAAMD,IAAOE,SAAUF,IAAOG,QAAS,YACzE,IAAK,YAAa,OAAOJ,IAAGC,IAAOC,KAAMD,IAAO3C,UAAW2C,IAAOG,QAAS,YAC3E,IAAK,SAAU,OAAOJ,IAAGC,IAAOC,KAAMD,IAAO1C,OAAQ0C,IAAOG,QAAS,YACrE,QAAU,OAAOJ,IAAGC,IAAOC,KAAMD,IAAOE,SAAUF,IAAOG,QAAS,aA+BrDC,CAAqBjC,IAEhC,kBAACkC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,EAAC/B,UAAWsB,IAAGC,IAAOS,YACxDtC,GAEH,kBAACmC,EAAA,EAAD,CAAYC,QAAQ,KAAKG,UAAU,KAAKF,cAAY,EAAC/B,UAAWsB,IAAGC,IAAOW,YACxE,kBAAC,IAAD,CAAShC,MAAO,EAAGC,IAAKI,EAAOH,SAAU,EAAGC,UAAU,MACtD,gCAnCV,SAAoB8B,EAAKC,GACvB,IAUIC,EAVAC,EAAK,CACP,CAAE/B,MAAO,EAAGgC,OAAQ,IACpB,CAAEhC,MAAO,IAAKgC,OAAQ,KACtB,CAAEhC,MAAO,IAAKgC,OAAQ,KACtB,CAAEhC,MAAO,IAAKgC,OAAQ,KACtB,CAAEhC,MAAO,KAAMgC,OAAQ,KACvB,CAAEhC,MAAO,KAAMgC,OAAQ,KACvB,CAAEhC,MAAO,KAAMgC,OAAQ,MAIzB,IAAKF,EAAIC,EAAGE,OAAS,EAAGH,EAAI,KACtBF,GAAOG,EAAGD,GAAG9B,OADY8B,KAK/B,OAAQF,EAAMG,EAAGD,GAAG9B,OAAOkC,QAAQL,GAAQM,QAPlC,2BAO8C,MAAQJ,EAAGD,GAAGE,OAkBvDI,CAAWpC,EAAO,KAK1B,kBAACsB,EAAA,EAAD,CAAYC,QAAQ,QAAQG,UAAU,KACnCzB,GAEFC,EAAiB,EAClB,kBAAC,EAAD,CAAOb,OAAQa,EAAgBZ,MAAOa,EAAYZ,KAAK,MAAMC,UAAU,IACrE,UCrEN6C,EAAU,CACd,CACElD,KAAM,WACNmD,QAAS,uCAEX,CACEnD,KAAM,YACNmD,QAAS,uCAEX,CACEnD,KAAM,SACNmD,QAAS,yCA4DEvC,EAvDF,SAAC,GAAc,IAAZ5B,EAAW,EAAXA,KAAW,EAGZA,GAAQA,EAAKoE,QAAWpE,EAAKoE,QAAQ,GAAKpE,EAD/CC,EAFiB,EAEjBA,UAAWC,EAFM,EAENA,UAAWC,EAFL,EAEKA,OAAQC,EAFb,EAEaA,WAAY2B,EAFzB,EAEyBA,eAAgBsC,EAFzC,EAEyCA,YAAaC,EAFtD,EAEsDA,eAG/E,IAAKrE,EACH,MAAO,aAGT,IAAMsE,EACJL,EAAQzD,KAAI,SAACqC,EAAMa,GACnB,IAAIa,EAAY,EACZC,EAAQ,EACRC,EAAS,OAqBb,MApBiB,aAAd5B,EAAK9B,MACNwD,EAAYvE,EAAU4B,MACtB4C,EAAQ1C,EACR2C,EAAS,QAEY,cAAd5B,EAAK9B,MACZwD,EAAYtE,EAAU2B,MACtB4C,EAAQH,EACRI,EAAS,SAEY,WAAd5B,EAAK9B,MACZwD,EAAYrE,EAAO0B,MACnB4C,EAAQJ,EACRK,EAAS,QAGTF,EAAY,EACZC,EAAQ,EACRC,EAAS,QAGT,kBAAC,IAAMC,SAAP,CAAgBC,IAAKjB,GACnB,kBAACkB,EAAD,CAAgB7D,KAAM8B,EAAK9B,KAAMa,MAAO2C,EAAW1C,QAASgB,EAAKqB,QAASpC,eAAgB0C,EAAOzC,WAAY0C,QAMnH,OACE,yBAAKpD,UAAWuB,IAAOiC,WACrB,kBAAC1C,EAAA,EAAD,CAAM0C,WAAS,EAACC,QAAS,EAAGC,QAAQ,UAChC5E,GAAc,kBAACgC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IAC7B,kBAACa,EAAA,EAAD,CAAYhC,MAAM,gBAAgBkC,cAAY,EAAC/B,UAAWuB,IAAOoC,aAAjE,wBAC0B,IAAIC,KAAK9E,GAAY+E,iBAGhDZ,K,0BCiGMa,EAlFD,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAW1F,EAAc,EAAdA,QAEtB2F,EAAU,GAAIC,EAAQ,GAAIC,EAAiBC,MAAMC,QAAQL,GAqBzDG,GAAkBH,GAClBC,EAAU,CAAC,CACPtF,KAAMqF,EAAU5E,KAAI,qBAAGR,aACvB0F,MAAO,YACPC,YAAa,uBACbC,MAAM,GACP,CACC7F,KAAMqF,EAAU5E,KAAI,qBAAGN,UACvBwF,MAAO,WACPC,YAAa,uBACbC,MAAM,IAEVN,EAAK,uBACGC,GAAkBH,GAAaA,EAAUpF,YACjDqF,EAAU,CAAC,CACPK,MAAO,SACPG,gBAAiB,CACb,YACA,uBACA,wBACJ9F,KAAM,CAACqF,EAAUpF,UAAU4B,MAAOwD,EAAUnF,UAAU2B,MAAOwD,EAAUlF,OAAO0B,SAElF0D,EAAK,4BAAwB5F,IAGjC,IAAMoG,EACFV,GAAaA,EAAU,GACnB,kBAAC,IAAD,CAAMrF,KAAM,CACRgG,OAAQX,EAAU5E,KAAI,qBAAGG,QACzBqF,SAAUX,GAEdY,QAAS,CACLX,MAAO,CAAEY,SAAS,EAAMC,KAAMb,GAC9Bc,qBAAqB,KAClB,KAGTC,EAAWjB,GAAaA,EAAUpF,UACpC,kBAAC,IAAD,CACID,KAAM,CACFgG,OAAQ,CAAC,YAAa,YAAa,YACnCC,SAAUX,GAEdY,QAAS,CACLK,OAAQ,CAAEJ,SAAS,GACnBZ,MAAO,CAAEY,SAAS,EAAMC,KAAMb,GAC9Bc,qBAAqB,KACjB,KAEhB,OACI,yBAAK/E,UAAWsB,IAAGC,IAAOiC,UAAW,aAChCnF,EAAW2G,EAAW,KAErB3G,EAAsB,KAAZoG,I,oCC5JlBS,EAAM,CAAC,CAAE3E,MAAO,GAAI8D,MAAO,WA2ChBc,EAzCG,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EACXzE,mBAAS,IADE,mBACtClB,EADsC,KAC3B4F,EAD2B,KAG7CC,qBAAU,YACM,uCAAG,gCAAAhH,EAAA,sEACGkB,IADH,OAGf,IAFI+F,EADW,OAEXC,EAAMD,EAAM/C,OACPH,EAAI,EAAGA,EAAImD,EAAKnD,IACvB6C,EAAIO,KAAK,CACLlF,MAAOgF,EAAMlD,GACbgC,MAAOkB,EAAMlD,KANJ,gBASXgD,EAAaH,GATF,2CAAH,qDAYdQ,KACC,IAMH,OACE,oCACA,kBAACC,EAAA,EAAD,CAAa3F,UAAWuB,IAAOqE,aAC7B,kBAAC,IAAD,CACA5F,UAAU,eACV6F,aAAc,GACdC,YAAa,SACbC,cAAc,EACdC,SAZiB,SAACC,GAClBb,EAAoBa,EAAe1F,QAYnCb,KAAK,QACLkF,QAASnF,EACTyG,MAAO,CAACC,MAAO,Y,SCjBNC,G,+DCjBGC,aAAW,SAACC,GAAD,MAAY,CACrCC,eAAgB,CACZC,OAAQ,EACRC,KAAM,gBACNC,OAAQ,EACRC,QAAS,EACTC,SAAU,SACVC,QAAS,EACTC,SAAU,WACVC,IAAK,GACLZ,MAAO,O,ODbA,WACX,OACI,yBAAKnG,UAAU,oBACX,kBAAC6B,EAAA,EAAD,CAAYhC,MAAM,gBAAgBgF,QAAQ,QAAQmC,MAAM,UAAxD,gBACiB,0BAAMd,MAAO,CAACrG,MAAO,YAArB,UADjB,OACqE,uBAAGoH,KAAK,0CAA0CC,OAAO,SAASC,IAAI,uBAAtE,kBAErE,kBAACtF,EAAA,EAAD,CAAahC,MAAM,gBAAgBgF,QAAQ,QAAQmC,MAAM,UAAzD,0BAEiB,uBAAGC,KAAK,gCAAgCC,OAAO,SAASC,IAAI,uBAA5D,gBAFjB,YAGiB,uBAAGF,KAAK,4CAA4CC,OAAO,SAASC,IAAI,uBAAxE,cAEjB,kBAACtF,EAAA,EAAD,CAAahC,MAAM,gBAAgBgF,QAAQ,QAAQmC,MAAM,UAAzD,+BAEiB,uBAAGC,KAAK,qDAAqDC,OAAO,SAASC,IAAI,uBAAjF,gBAFjB,YAGiB,uBAAGF,KAAK,yDAAyDC,OAAO,SAASC,IAAI,uBAArF,0B,qGEPvBC,GAAYf,aAAW,SAACC,GAAD,MAAY,CACvCe,KAAM,CACJP,SAAU,QACVQ,OAAQhB,EAAM7C,QAAQ,GACtB8D,MAAOjB,EAAM7C,QAAQ,IAEvB+D,OAAQ,CACJhD,gBAAiB,QAErBiD,QAAS,CACP5C,QAAS,OACT6C,WAAY,SACZC,eAAgB,cAIpB,SAASC,GAAUC,GAAQ,IACjBC,EAAqBD,EAArBC,SAAUC,EAAWF,EAAXE,OACZC,EAAUZ,KAIVa,EAAUC,aAAiB,CAC/BhB,OAAQa,EAASA,SAAWI,EAC5BC,mBAAmB,EACnBC,UAAW,MAWb,OACE,kBAACC,GAAA,EAAD,CAAMC,GAAIN,GACR,yBAAKO,QAVW,SAACC,GACnB,IAAMC,GAAUD,EAAMvB,OAAOyB,eAAiBC,UAAUC,cAAc,uBAElEH,GACFA,EAAOI,eAAe,CAAEC,SAAU,SAAUC,MAAO,YAMxBC,KAAK,eAAejJ,UAAWgI,EAAQX,MAC/DS,IAeM,SAASoB,GAAUrB,GAC9B,IAAMG,EAAUZ,KAClB,OACE,kBAAC,IAAM/D,SAAP,KACE,kBAAC8F,GAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQpJ,UAAWgI,EAAQR,QACzB,kBAAC6B,GAAA,EAAD,CAASrJ,UAAWgI,EAAQP,SAE1B,yBAAK6B,IAAKC,KAAWC,IAAI,WAAW9C,OAAO,WAG/C,kBAAC2C,GAAA,EAAD,CAASI,GAAG,uBACZ,kBAAC7B,GAAcC,EACb,kBAAC6B,GAAA,EAAD,CAAK7J,MAAM,UAAUC,KAAK,QAAQ6J,aAAW,sBAC3C,kBAAC,KAAD,S,0BCwDKC,IChDAC,G,4MA/EbC,MAAQ,CACNpL,KAAM,GACNqF,UAAW,GACX1F,QAAS,I,EAWX+G,oB,uCAAsB,WAAO/G,GAAP,iBAAAC,EAAA,yDAChBI,EAAO,GACPqF,EAAY,IAMb1F,EARiB,iCASLD,EAAiBC,GATZ,cASlBK,EATkB,gBAUAN,EAAiBC,GAVjB,OAUlB0F,EAVkB,gDAaL3F,IAbK,eAalBM,EAbkB,iBAcAO,IAdA,QAclB8E,EAdkB,gCAgBd,EAAKgG,SAAS,CAAErL,OAAML,UAAU0F,cAhBlB,4C,0PAND3F,I,cAAbM,E,gBACkBO,I,OAAlB8E,E,OAENiG,KAAKD,SAAS,CAAErL,OAAMqF,c,qIAsBd,IAAD,EAC8BiG,KAAKF,MAAlCpL,EADD,EACCA,KAAML,EADP,EACOA,QAAS0F,EADhB,EACgBA,UAEvB,OACE,oCACA,yBAAK/D,UAAU,OACb,kBAAC,GAAD,MACA,kBAACiK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,yBAAKnK,UAAWuB,IAAOiC,WAEpB,kEACD,kBAAC4G,EAAD,CAAehF,oBAAqB4E,KAAK5E,sBAGzC,kBAACiF,EAAD,CAAO3L,KAAMA,IAEZqF,GAAa,kBAAC,EAAD,CAAOA,UAAWA,EAAW1F,QAASA,OAmBzD0F,EAAY,kBAAC,EAAD,MAAa,oCACxB,gD,GAvEQuG,IAAMC,WCHxBC,IAASC,OAAO,kBAAC,GAAD,MAAS7B,SAAS8B,eAAe,W","file":"static/js/main.d0ff8e2b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\",\"mainTitle\":\"Cards_mainTitle__2c2XD\",\"countCard\":\"Cards_countCard__1p0aQ\",\"newCard\":\"Cards_newCard__31UFl\",\"refreshDate\":\"Cards_refreshDate__3Q8K4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\nconst apiUrl = 'https://api.covid19india.org';\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    return error;\n  }\n};\n\n// export const fetchDailyData = async () => {\n//   try {\n//     const { data } = await axios.get(`${url}/daily`);\n\n//     return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\n//   } catch (error) {\n//     return error;\n//   }\n// };\n\nexport const fetchCountryData = async (country) => {\n  let changeableUrl = !country ? url : `${url}/countries/${country}`;\n  try {\n      const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n      return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n      console.log(\"Error 1\", error);\n  }\n}\n\nexport const fetchDailyData = async () => {\n  try {\n      const { data } = await axios.get(`${url}/daily`);\n      const modifiedData = data.map(dailyData => ({\n          confirmed: dailyData.confirmed.total,\n          deaths: dailyData.deaths.total,\n          date: dailyData.reportDate\n      }));\n      return modifiedData;\n  } catch (error) {\n      console.log(\"Error 2\", error)\n  }\n}\n\nexport const fetchCountries = async () => {\n  try {\n    const { data: { countries } } = await axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name);\n  } catch (error) {\n    return error;\n  }\n};\n\n\nexport const fetchIndiaData = async () => {\n  try {\n      const {data : {statewise}}  = await axios.get(`${apiUrl}/data.json`);\n      // const stateData = data.filter((state) => state.state === \"Tamil Nadu\")\n      const stateData = statewise.filter((a, b) => a.state!=='Total')\n          .sort((a, b) => parseInt(b.confirmed) - parseInt(a.confirmed))\n          .map(({ state, confirmed, active, recovered,\n              deaths, lastupdatedtime, deltaconfirmed, deltadeaths, deltarecovered}) => {\n              return {\n                  stateName: state,\n                  confirmed: parseInt(confirmed),\n                  active: parseInt(active),\n                  recovered: parseInt(recovered),\n                  deaths: parseInt(deaths),\n                  deltaconfirmed: parseInt(deltaconfirmed),\n                  deltarecovered: parseInt(deltarecovered),\n                  deltadeaths: parseInt(deltadeaths),\n                  lastUpdated: lastupdatedtime\n              }\n          });\n      const totData = statewise.filter((a, b) => a.state==='Total')\n          .map(({  confirmed, recovered,\n              deaths, deltaconfirmed, deltadeaths, deltarecovered}) => {\n                  return {\n                      confirmed: {value: parseInt(confirmed)},\n                      recovered: {value: parseInt(recovered)},\n                      deaths: {value: parseInt(deaths)},\n                      deltaconfirmed: parseInt(deltaconfirmed),\n                      deltarecovered: parseInt(deltarecovered),\n                      deltadeaths: parseInt(deltadeaths),\n                  }\n              });\n      return { stateData, totData };\n  } catch (error) {\n      console.log(\"Error 3\", error);\n  }\n}\n\nexport const fetchIndiaGraphData = async () => {\n  try {\n      const {data : {cases_time_series}}  = await axios.get(`${apiUrl}/data.json`);\n      // const stateData = data.filter((state) => state.state === \"Tamil Nadu\")\n      const graphData = cases_time_series\n          .map(({ dailyconfirmed, dailydeceased, dailyrecovered, date}) => {\n              return {\n                  date,\n                  confirmed: parseInt(dailyconfirmed),\n                  recovered: parseInt(dailyrecovered),\n                  deaths: parseInt(dailydeceased),\n              }\n          });\n      return graphData;\n  } catch (error) {\n      console.log(\"Error 4\", error);\n  }\n}","import EjectRoundedIcon from '@material-ui/icons/EjectRounded';\nimport React from 'react';\nimport CountUp from 'react-countup';\nimport './Delta.css';\n\n\nconst Delta = ({ inpCnt, color, size, fromCard }) => {\n    return (\n        <>\n            <div className={fromCard ? `space` : null}>\n            <span className={`delta-data-${color} delta-data-${size}`}>\n                <EjectRoundedIcon fontSize=\"small\" className={fromCard ? `delta-data-${size} delta-data-icon-${size}` :\n                `delta-data-${size} delta-data-icon-${size} space1 tableSpace`\n                } />\n                <CountUp start={0} end={inpCnt ? inpCnt : 0} duration={2.5} separator=\",\" />{' '}\n            </span>\n            </div>\n        </>\n    );\n}\n\nexport default Delta;","import { Card, CardContent, Grid, Typography } from '@material-ui/core';\nimport cx from 'classnames';\nimport React, { useState } from 'react';\nimport CountUp from 'react-countup';\nimport Delta from '../Delta/Delta';\nimport styles from './Cards.module.css';\n\nconst Info = ({ name, value, subHead, deltaconfirmed, deltaColor }) => {\n  const [raised, setRaised] = useState(false);\n\n\n  const onMouseOver = () => {\n    setRaised(true);\n  }\n\n  const onMouseOut = () => {\n    setRaised(false);\n  }\n\n  function temperatureClassname(temp){\n  \n    switch (temp) {\n      case 'Infected': return cx(styles.card, styles.infected, styles.newCard, 'fadeInUp')\n      case 'Recovered': return cx(styles.card, styles.recovered, styles.newCard, 'fadeInUp')\n      case 'Deaths': return cx(styles.card, styles.deaths, styles.newCard, 'fadeInUp')\n      default : return cx(styles.card, styles.infected, styles.newCard, 'fadeInUp')\n    }\n  }\n\n  function nFormatter(num, digits) {\n    var si = [\n      { value: 1, symbol: \"\" },\n      { value: 1E3, symbol: \"k\" },\n      { value: 1E6, symbol: \"M\" },\n      { value: 1E9, symbol: \"B\" },\n      { value: 1E12, symbol: \"T\" },\n      { value: 1E15, symbol: \"P\" },\n      { value: 1E18, symbol: \"E\" }\n    ];\n    var rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n    var i;\n    for (i = si.length - 1; i > 0; i--) {\n      if (num >= si[i].value) {\n        break;\n      }\n    }\n    return (num / si[i].value).toFixed(digits).replace(rx, \"$1\") + si[i].symbol;\n  }\n\n  return (\n    <>\n      <Grid item xs={12} md={3} >\n        <Card \n        onMouseOver={() => onMouseOver()}\n        onMouseOut={() => onMouseOut()}\n        raised={raised}\n        className={temperatureClassname(name)}\n        >\n        <CardContent>\n          <Typography variant='h2' gutterBottom className={cx(styles.mainTitle)}>\n            {name}\n          </Typography>\n          <Typography variant=\"h1\" component=\"h1\" gutterBottom className={cx(styles.countCard)}>\n            <CountUp start={0} end={value} duration={1} separator=\",\" />\n            <p>~ {nFormatter(value, 1)}</p>\n          </Typography>\n          {/* <Typography color=\"textSecondary\" gutterBottom>\n            {new Date(date).toDateString()}\n          </Typography> */}\n          <Typography variant=\"body2\" component=\"p\">\n            {subHead}\n          </Typography>\n          {deltaconfirmed > 0 ? \n          <Delta inpCnt={deltaconfirmed} color={deltaColor} size='med' fromCard={true}/>\n          : null}\n        </CardContent>\n        </Card>\n      </Grid>\n    </>\n  );\n};\nexport default Info;\n","import { Grid, Typography } from '@material-ui/core';\nimport React from 'react';\nimport styles from './Cards.module.css';\nimport IndividualCard from './IndividualCard';\n\nconst cardObj = [\n  {\n    name: 'Infected',\n    subhead: 'Number of active cases of COVID-19.', \n  },\n  {\n    name: 'Recovered',\n    subhead: 'Number of recoveries from COVID-19.',\n  },\n  {\n    name: 'Deaths',\n    subhead: 'Number of deaths caused by COVID-19.',\n  },\n]\n\n\nconst Info = ({ data }) => {\n\n  const { confirmed, recovered, deaths, lastUpdate, deltaconfirmed, deltadeaths, deltarecovered } \n            = (data && data.totData) ? data.totData[0] : data;\n\n  if (!confirmed) {\n    return 'Loading...';\n  }\n\n  const cardsRender =  \n    cardObj.map((card, i) => {\n    let cardValue = 0;\n    let delta = 0;\n    let dColor = 'grey';\n    if(card.name === 'Infected') {\n      cardValue = confirmed.value; \n      delta = deltaconfirmed;\n      dColor = 'blue';\n    }  \n    else if (card.name === 'Recovered') {\n      cardValue = recovered.value;\n      delta = deltarecovered;\n      dColor = 'green';\n    }\n    else if (card.name === 'Deaths') {\n      cardValue = deaths.value  \n      delta = deltadeaths;\n      dColor = 'red';\n    }\n    else {\n      cardValue = 0;\n      delta = 0;\n      dColor = 'grey';\n    }\n    return (\n      <React.Fragment key={i}>\n        <IndividualCard name={card.name} value={cardValue} subHead={card.subhead} deltaconfirmed={delta} deltaColor={dColor}/>\n      </React.Fragment>\n    )\n    }\n    )\n\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        { lastUpdate && <Grid item xs={12} >\n          <Typography color=\"textSecondary\" gutterBottom className={styles.refreshDate}>\n              Data last refreshed: {new Date(lastUpdate).toDateString()}\n          </Typography>\n        </Grid>}\n        {cardsRender}\n      </Grid>\n    </div>\n  );\n};\nexport default Info;\n","import cx from 'classnames';\nimport React from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\n\n// const Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n//   const [dailyData, setDailyData] = useState({});\n//   const [graphData, setGraphData] = useState([]);\n\n//   useEffect(() => {\n//     const fetchMyAPI = async () => {\n//       let initialDailyData = {};\n//       if(country === 'India') {\n//         console.log(\"Set India data\");\n//         const fetchData = async () => {\n//             setDailyData(await fetchIndiaData());\n//         }\n//         fetchData();\n//         const fetchGraphData = async () => {\n//             setGraphData(await fetchIndiaGraphData());\n//         }\n//         fetchGraphData();\n//       }\n//       initialDailyData = await fetchDailyData();\n\n//       setDailyData(initialDailyData);\n//     };\n\n//     fetchMyAPI();\n//   }, [country]);\n\n//   const barChart = (\n//     confirmed ? (\n//       <Bar\n//         data={{\n//           labels: ['Infected', 'Recovered', 'Deaths'],\n//           datasets: [\n//             {\n//               label: 'People',\n//               backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n//               data: [confirmed.value, recovered.value, deaths.value],\n//             },\n//           ],\n//         }}\n//         options={{\n//           legend: { display: false },\n//           title: { display: true, text: `Current state in ${country}` },\n//         }}\n//       />\n//     ) : null\n//   );\n\n//   const lineChart = (\n//     dailyData[0] ? (\n//       <Line\n//         data={{\n//           labels: dailyData.map(({ date }) => date),\n//           datasets: [{\n//             data: dailyData.map((data) => data.confirmed),\n//             label: 'Infected',\n//             borderColor: '#3333ff',\n//             fill: true,\n//           }, {\n//             data: dailyData.map((data) => data.deaths),\n//             label: 'Deaths',\n//             borderColor: 'red',\n//             backgroundColor: 'rgba(255, 0, 0, 0.5)',\n//             fill: true,\n//           },\n//           ],\n//         }}\n//       />\n//     ) : null\n//   );\n\n//   return (\n//     <div className={styles.container}>\n//       {country ? barChart : lineChart}\n//     </div>\n//   );\n// };\n\n// export default Chart;\n\n\nconst Chart = ({ graphData, country }) => {\n\n  let dataset = [], title = '', isGraphDataArr = Array.isArray(graphData);\n\n//   if (country === 'India' && isGraphDataArr && graphData) {\n//       dataset = [{\n//           data: isGraphDataArr ? graphData.map(({ confirmed }) => confirmed) : [],\n//           label: 'Confirmed',\n//           borderColor: 'rgba(0, 0, 255, 0.5)',\n//           fill: true\n//       }, {\n//           data: isGraphDataArr ? graphData.map(({ recovered }) => recovered) : [],\n//           label: 'Recovered',\n//           borderColor: 'rgba(0, 255, 0, 0.5)',\n//           fill: true\n//       }, {\n//           data: isGraphDataArr ? graphData.map(({ deaths }) => deaths) : [],\n//           label: 'Deceased',\n//           borderColor: 'rgba(255, 0, 0, 0.5)',\n//           fill: true\n//       }];\n//       title = `Daily Cases Timeline`;\n//   } else \n  if (isGraphDataArr && graphData) {\n      dataset = [{\n          data: graphData.map(({ confirmed }) => confirmed),\n          label: 'Confirmed',\n          borderColor: 'rgba(0, 0, 255, 0.5)',\n          fill: true\n      }, {\n          data: graphData.map(({ deaths }) => deaths),\n          label: 'Deceased',\n          borderColor: 'rgba(255, 0, 0, 0.5)',\n          fill: true\n      }];\n      title = `Daily Cases Growth`;\n  } else if (!isGraphDataArr && graphData && graphData.confirmed ) {\n      dataset = [{\n          label: 'People',\n          backgroundColor: [\n              '#007bff99',\n              'rgba(0, 255, 0, 0.5)',\n              'rgba(255, 0, 0, 0.5)'],\n          data: [graphData.confirmed.value, graphData.recovered.value, graphData.deaths.value]\n      }];\n      title = `Current status in ${country}`;\n  }\n\n  const lineChart = (\n      graphData && graphData[0] ?\n          <Line data={{\n              labels: graphData.map(({ date }) => date),\n              datasets: dataset\n          }} \n          options={{\n              title: { display: true, text: title },\n              maintainAspectRatio: false\n          }}/> : null\n  );\n\n  const barChart = graphData && graphData.confirmed ?\n      <Bar\n          data={{\n              labels: ['Confirmed', 'Recovered', 'Deceased'],\n              datasets: dataset\n          }}\n          options={{\n              legend: { display: false },\n              title: { display: true, text: title },\n              maintainAspectRatio: false\n          }} /> : null;\n\n  return (\n      <div className={cx(styles.container, 'fadeInUp')}>\n          {country ?  barChart : null}\n          {/* {country ? (country === 'India' ? lineChart : barChart) : null} */}\n          {!country ? lineChart : null}\n          {/* {country === 'India' ? lineChart : null} */}\n      </div>\n  );\n}\n\nexport default Chart;\n","import { FormControl } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { fetchCountries } from '../../api';\nimport styles from './CountryPicker.module.css';\n\nlet arr = [{ value: '', label: 'Global'}];\n\nconst Countries = ({ handleCountryChange }) => {\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      let count = await fetchCountries();\n      var len = count.length;\n      for (var i = 0; i < len; i++) {\n        arr.push({\n            value: count[i],\n            label: count[i],\n        });\n      }\n    await setCountries(arr);\n    };\n\n    fetchAPI();\n  }, []);\n\n  const handleChange = (selectedOption) => {\n      handleCountryChange(selectedOption.value);\n  }\n\n  return (\n    <>\n    <FormControl className={styles.formControl}>\n      <Select\n      className=\"basic-single\"\n      defaultValue={''}\n      placeholder={'Global'}\n      isSearchable={true}\n      onChange={handleChange}\n      name=\"color\"\n      options={countries}\n      style={{width: '50%'}}  \n      />\n    </FormControl>\n    </>\n  );\n};\n\nexport default Countries;\n","import { Typography } from '@material-ui/core';\nimport React from 'react';\nimport './Footer.css';\n\n\nconst Footer = () => {\n    return (\n        <div className=\"footer-container\">\n            <Typography color=\"textSecondary\" display=\"block\" align='center'>\n                Created with <span style={{color: '#e25555'}}>&hearts;</span> by <a href=\"https://virtuosArs.github.io/ARSOnePage\" target=\"_blank\" rel=\"noopener noreferrer\">Ankush Sankhe</a>\n            </Typography>\n            <Typography  color=\"textSecondary\" display=\"block\" align='center'>\n                Data Sources:\n                &nbsp;|&nbsp;<a href=\"https://api.covid19india.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Covid19India</a>\n                &nbsp;|&nbsp;<a href=\"https://github.com/mathdroid/covid-19-api\" target=\"_blank\" rel=\"noopener noreferrer\">Mathdroid</a>\n            </Typography>\n            <Typography  color=\"textSecondary\" display=\"block\" align='center'>\n                UI Inspiration by:\n                &nbsp;|&nbsp;<a href=\"https://github.com/covid19india/covid19india-react\" target=\"_blank\" rel=\"noopener noreferrer\">Covid19India</a>\n                &nbsp;|&nbsp;<a href=\"https://github.com/adrianhajdin/project_corona_tracker\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript Mastery</a>\n            </Typography>\n        </div>\n    );\n}\n\nexport default Footer;","import { makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TableSortLabel, Typography } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport CountUp from 'react-countup';\nimport { getComparator, stableSort } from '../../utils';\nimport Delta from '../Delta/Delta';\nimport './DataTable.css';\n\n\nconst useStyles = makeStyles((theme) => ({\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nconst DataTable = ({ data, value, index, country }) => {\n    const classes = useStyles();\n    const [orderBy, setOrderBy] = useState('confirmed');\n    const [order, setOrder] = useState('desc');\n    // const [lastUpdate, setLastUpdate] = useState('');\n    let firstLabel = 'District', lastUpdate ='';\n\n    // if (value !== index) return null;\n    if (country === 'India') {\n        firstLabel = 'State/UT';\n        lastUpdate = '';\n        data = data && data.stateData ? data.stateData : [];\n    } else if (country === '') {\n        firstLabel = 'Country';\n        lastUpdate = '';\n    }\n\n    const headCells = [\n        { id: 'stateName', numeric: false, disablePadding: false, label: firstLabel },\n        { id: 'confirmed', numeric: true, disablePadding: false, label: 'Confirmed' },\n        { id: 'active', numeric: true, disablePadding: false, label: 'Active' },\n        { id: 'recovered', numeric: true, disablePadding: false, label: 'Recovered' },\n        { id: 'deaths', numeric: true, disablePadding: false, label: 'Deceased' }\n    ];\n\n    const tableData = data && !data.length ? (\n        <TableRow>\n            <TableCell align=\"center\" colSpan={5}>\n                <Typography variant=\"button\" display=\"block\" align='center'>\n                    Loading...\n                </Typography>\n            </TableCell>\n        </TableRow>) :\n        stableSort(data, getComparator(order, orderBy))\n            .map(({ stateName, confirmed, active, recovered, deaths, lastUpdated, \n                    deltaconfirmed, deltadeaths, deltarecovered }) => {\n                if (!lastUpdate) lastUpdate = lastUpdated;\n                return (\n                    <TableRow key={stateName} hover>\n                        <TableCell component=\"th\" scope=\"row\" className=\"table-cell\">\n                            {stateName}\n                        </TableCell>\n                        <TableCell align=\"right\" className=\"table-cell\">\n                            {deltaconfirmed > 0 ? <Delta inpCnt={deltaconfirmed} color='red' size='small'/> : null}\n                            <CountUp start={0} end={confirmed ? confirmed : 0} duration={1} separator=\",\" />\n                        </TableCell>\n                        <TableCell align=\"right\" className=\"table-cell\">\n                            <CountUp start={0} end={active ? active : 0} duration={1} separator=\",\" />\n                        </TableCell>\n                        <TableCell align=\"right\" className=\"table-cell\">\n                            {deltarecovered > 0 ? <Delta inpCnt={deltarecovered} color='green' size='small'/> : null}\n                            <CountUp start={0} end={recovered ? recovered : 0} duration={1} separator=\",\" />\n                        </TableCell>\n                        <TableCell align=\"right\" className=\"table-cell\">\n                            {deltadeaths > 0 ? <Delta inpCnt={deltadeaths} color='grey' size='small'/> : null}\n                            <CountUp start={0} end={deaths ? deaths : 0} duration={1} separator=\",\" />\n                        </TableCell>\n                        {/* <TableCell align=\"right\" className=\"table-cell\">{active}</TableCell>\n                        <TableCell align=\"right\" className=\"table-cell\">{recovered}</TableCell>\n                        <TableCell align=\"right\" className=\"table-cell\">{deaths}</TableCell> */}\n                    </TableRow>\n                )\n            });\n\n    const lastUpdatedSec = lastUpdate ? (<Typography variant=\"caption\" display=\"block\" align='center'>\n        Last Updated at {lastUpdate}\n    </Typography>) : null;\n\n    const handleSort = (property) => (event) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    }\n\n    return (\n        <>\n        {/* <div className=\"datatable-container\"> */}\n                {lastUpdatedSec}\n                <div className={classes.tableContainer}>\n                <TableContainer component={Paper}  className={classes.tableContainer}>\n                    <Table stickyHeader  aria-label=\"sticky table\">\n                        <TableHead>\n                            <TableRow>\n                                {headCells.map((headCell) => (\n                                    <TableCell\n                                        key={headCell.id}\n                                        align={headCell.numeric ? 'right' : 'left'}\n                                        padding={headCell.disablePadding ? 'none' : 'default'}\n                                        sortDirection={orderBy === headCell.id ? order : false}\n                                        className=\"table-cell\">\n                                        <TableSortLabel\n                                            active={orderBy === headCell.id}\n                                            direction={orderBy === headCell.id ? order : 'asc'}\n                                            onClick={handleSort(headCell.id)}\n                                            className=\"t-head\"\n                                        >\n                                            {headCell.label}\n                                            {orderBy === headCell.id ? (\n                                                <span className={classes.visuallyHidden}>\n                                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                                </span>\n                                            ) : null}\n                                        </TableSortLabel>\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {tableData}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                </div>\n        {/* </div> */}\n        </>\n    );\n}\n\nexport default DataTable;","import AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Fab from '@material-ui/core/Fab';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport Zoom from '@material-ui/core/Zoom';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport covidLogo from '../../images/image.png';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: 'fixed',\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n  appBar: {\n      backgroundColor: '#fff',\n  },\n  toolBar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  }\n}));\n\nfunction ScrollTop(props) {\n  const { children, window } = props;\n  const classes = useStyles();\n  // Note that you normally won't need to set the window ref as useScrollTrigger\n  // will default to window.\n  // This is only being set here because the demo is in an iframe.\n  const trigger = useScrollTrigger({\n    target: window ? window() : undefined,\n    disableHysteresis: true,\n    threshold: 100,\n  });\n\n  const handleClick = (event) => {\n    const anchor = (event.target.ownerDocument || document).querySelector('#back-to-top-anchor');\n\n    if (anchor) {\n      anchor.scrollIntoView({ behavior: 'smooth', block: 'center' });\n    }\n  };\n\n  return (\n    <Zoom in={trigger}>\n      <div onClick={handleClick} role=\"presentation\" className={classes.root}>\n        {children}\n      </div>\n    </Zoom>\n  );\n}\n\nScrollTop.propTypes = {\n  children: PropTypes.element.isRequired,\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window: PropTypes.func,\n};\n\nexport default function BackToTop(props) {\n    const classes = useStyles();\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar className={classes.appBar}>\n        <Toolbar className={classes.toolBar}>\n          {/* <Typography variant=\"h6\">Covid 19 Live</Typography> */}\n          <img src={covidLogo} alt=\"Covid 19\" height=\"41px\" />\n        </Toolbar>\n      </AppBar>\n      <Toolbar id=\"back-to-top-anchor\" />\n      <ScrollTop {...props}>\n        <Fab color=\"primary\" size=\"small\" aria-label=\"scroll back to top\">\n          <KeyboardArrowUpIcon />\n        </Fab>\n      </ScrollTop>\n    </React.Fragment>\n  );\n}\n","import React, { useEffect, useMemo, useState } from 'react';\nimport * as Icon from 'react-feather';\nimport Row from './row';\n\n\nfunction Table(props) {\n  const [states, setStates] = useState(props.states);\n  const [count, setCount] = useState(0);\n  const [sortData, setSortData] = useState({\n    sortColumn: 'confirmed',\n    isAscending: false,\n  });\n\n  useEffect(()=>{\n    if (props.summary===true) {\n      setStates(props.states.slice(0, 9));\n    } else {\n      setStates(props.states);\n    }\n  }, [props.states]);\n\n  useEffect(()=>{\n    if (states.length>0) {\n      let length = 0;\n      props.states.map((state, i) => {\n        if (i!==0 && state.confirmed>0) length+=1;\n        if (i===props.states.length-1) setCount(length);\n      });\n    }\n  }, [states.length]);\n\n  const doSort = (e, props) => {\n    // const totalRow = states.splice(0, 1);\n    // console.log(\"Sort==\", totalRow);\n    {/* console.log(totalRow);*/}\n    states.sort((StateData1, StateData2) => {\n      const sortColumn = sortData.sortColumn;\n      let value1 = StateData1[sortColumn];\n      let value2 = StateData2[sortColumn];\n\n      if (sortColumn != 'state') {\n        value1 = parseInt(StateData1[sortColumn]);\n        value2 = parseInt(StateData2[sortColumn]);\n      }\n\n      if (sortData.isAscending) {\n        return value1 > value2? 1 : -1;\n      } else {\n        return value1 > value2? -1 : 1;\n      }\n    });\n    // states.unshift(totalRow[0]);\n  };\n\n  const handleSort = (e, props) => {\n    const currentsortColumn = e.currentTarget.querySelector('abbr').getAttribute('title').toLowerCase();\n    setSortData({\n      sortColumn: currentsortColumn,\n      isAscending: sortData.sortColumn == currentsortColumn? !sortData.isAscending : sortData.sortColumn === 'state',\n    });\n  };\n\n  const FineprintBottom = useMemo(\n    () => (\n      <h5 className=\"table-fineprint fadeInUp\" style={{animationDelay: '1s'}}>\n        {states.slice(1).filter((s) => s && s.confirmed > 0).length} States/UTS\n        Affected\n      </h5>\n    ),\n    [states]\n  );\n\n  doSort();\n\n  return (\n      <>\n      {states && FineprintBottom}\n    <table className=\"table fadeInUp\" style={{animationDelay: '1s'}}>\n      <thead>\n        <tr>\n          <th className=\"state-heading\" onClick={(e) => handleSort(e, props)} >\n            <div className='heading-content'>\n              <abbr title=\"State\">\n                  State/UT\n              </abbr>\n              <div style={{display: sortData.sortColumn === 'state' ? 'initial': 'none'}}><Icon.Maximize2/></div>\n            </div>\n          </th>\n          <th onClick={(e) => handleSort(e, props)}>\n            <div className='heading-content'>\n              <abbr className={`${window.innerWidth <=769 ? 'is-cherry' : ''}`} title=\"Confirmed\">{window.innerWidth <=769 ? window.innerWidth <=375 ? 'C' : 'Cnfrmd' : 'Confirmed'}</abbr>\n              <div style={{display: sortData.sortColumn === 'confirmed' ? 'initial': 'none'}}><Icon.Maximize2/></div>\n            </div>\n          </th>\n          <th onClick={(e) => handleSort(e, props)}>\n            <div className='heading-content'>\n              <abbr className={`${window.innerWidth <=769 ? 'is-blue' : ''}`} title=\"Active\">{window.innerWidth <=769 ? window.innerWidth <=375 ? 'A' : 'Actv' : 'Active'}</abbr>\n              <div style={{display: sortData.sortColumn === 'active' ? 'initial': 'none'}}><Icon.Maximize2/></div>\n            </div>\n          </th>\n          <th onClick={(e) => handleSort(e, props)}>\n            <div className='heading-content'>\n              <abbr className={`${window.innerWidth <=769 ? 'is-green' : ''}`} title=\"Recovered\">{window.innerWidth <=769 ? window.innerWidth <=375 ? 'R' : 'Rcvrd' : 'Recovered'}</abbr>\n              <div className={ sortData.sortColumn === 'recovered'? 'sort-black' : ''}></div>\n              <div style={{display: sortData.sortColumn === 'recovered' ? 'initial': 'none'}}><Icon.Maximize2/></div>\n            </div>\n          </th>\n          <th onClick={(e) => handleSort(e, props)}>\n            <div className='heading-content'>\n              <abbr className={`${window.innerWidth <=769 ? 'is-gray' : ''}`} title=\"Deaths\">{window.innerWidth <=769 ? window.innerWidth <=375 ? 'D' : 'DCSD' : 'Deaths'}</abbr>\n              <div style={{display: sortData.sortColumn === 'deaths' ? 'initial': 'none'}}><Icon.Maximize2/></div>\n            </div>\n          </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          states.map((state, index) => {\n            {/* if (index!==0 && state.confirmed>0) { */}\n              return (\n                <Row key={index} state={state} total={false}/>\n              );\n            {/* } */}\n          })\n        }\n\n        {states.length > 1 && props.summary===false && <Row key={0} state={states[0]} total={true}/>}\n      </tbody>\n\n    </table>\n    {states && FineprintBottom}\n    </>\n  );\n}\n\nexport default Table;\n","import Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport React from 'react';\nimport { fetchCountryData, fetchDailyData, fetchIndiaData, fetchIndiaGraphData } from './api/';\nimport styles from './App.module.css';\nimport './App.scss';\nimport { Cards, Chart, ChoroplethMap, CountryPicker, Footer, Header, Table } from './components';\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    graphData: [],\n    country: '',\n  }\n\n  async componentDidMount() {\n    // const data = await fetchData();\n    const data = await fetchCountryData();\n    const graphData = await fetchDailyData();\n\n    this.setState({ data, graphData });\n  }\n\n  handleCountryChange = async (country) => {\n    let data = {};\n    let graphData = [];\n\n    // if(country === 'India') {\n    //   data = await fetchIndiaData();\n    //   graphData = await fetchIndiaGraphData();\n    // }\n    if(country) {\n      data = await fetchCountryData(country);\n      graphData = await fetchCountryData(country);\n    }\n    else {\n      data = await fetchCountryData();\n      graphData = await fetchDailyData();\n    }\n    await this.setState({ data, country , graphData });\n  }\n\n  render() {\n    const { data, country, graphData } = this.state;\n\n    return (\n      <>\n      <div className=\"App\">\n        <Header />\n        <Container>\n          <Box my={2}>\n            <div className={styles.container}>\n              {/* <img className={styles.image} src={image} alt=\"COVID-19\" /> */}\n              {<p>Search the country to get the stats</p>}\n              <CountryPicker handleCountryChange={this.handleCountryChange} />\n              {/* {\n                country !== 'India' && graphData && <p onClick={() => this.handleCountryChange('India')}>India</p>} */}\n              <Cards data={data} />\n              {/* <Chart data={data} country={country} /> */}\n              {graphData && <Chart graphData={graphData} country={country} />}\n              {/* {graphData && country !== 'India' && <Chart graphData={graphData} country={country} />} */}\n              {/* {\n                country === 'India' && graphData && data &&\n                <>\n                <div className=\"Home\">\n                <div className=\"home-left\">\n                  {data && data.stateData && <ChoroplethMap states={data.stateData}/> }\n                </div>\n                <div className=\"home-right\">\n                  <Table states={data.stateData} />\n                </div>\n                </div>\n                <Chart graphData={graphData} country={country} />\n                </>\n              }  */}\n            </div>\n          </Box>\n        </Container>\n        {graphData ? <Footer /> : <>\n          <p>Loading...</p>\n        </>\n        }\n      </div>\n      </>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}