{"version":3,"sources":["components/Cards/Cards.module.css","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png","api/index.js","components/Delta/Delta.jsx","components/Cards/IndividualCard.jsx","components/Cards/Cards.jsx","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Footer/Footer.jsx","components/DataTable/DataTable.js","components/Header/Header.jsx","components/Map/ChoroplethMap.js","components/Table/row.js","components/Table/Table.js","App.js","index.js"],"names":["module","exports","url","apiUrl","fetchCountryData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","fetchIndiaData","statewise","stateData","filter","b","state","sort","parseInt","active","lastupdatedtime","deltaconfirmed","deltadeaths","deltarecovered","stateName","lastUpdated","totData","value","fetchIndiaGraphData","cases_time_series","graphData","dailyconfirmed","dailydeceased","dailyrecovered","Delta","inpCnt","color","size","fromCard","className","fontSize","start","end","duration","separator","Info","subHead","deltaColor","useState","raised","setRaised","Grid","item","xs","md","Card","onMouseOver","onMouseOut","temp","cx","styles","card","infected","newCard","temperatureClassname","CardContent","Typography","variant","gutterBottom","mainTitle","component","countCard","num","digits","i","si","symbol","length","toFixed","replace","nFormatter","cardObj","subhead","cardsRender","cardValue","delta","dColor","Fragment","key","IndividualCard","container","spacing","justify","refreshDate","Date","toDateString","Chart","dataset","title","isGraphDataArr","Array","isArray","label","borderColor","fill","backgroundColor","lineChart","labels","datasets","options","display","text","maintainAspectRatio","barChart","legend","arr","Countries","handleCountryChange","setCountries","useEffect","count","len","push","fetchAPI","FormControl","formControl","defaultValue","placeholder","isSearchable","onChange","selectedOption","style","width","Footer","makeStyles","theme","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","align","href","target","rel","useStyles","root","bottom","right","appBar","toolBar","alignItems","justifyContent","ScrollTop","props","children","window","classes","trigger","useScrollTrigger","undefined","disableHysteresis","threshold","Zoom","in","onClick","event","anchor","ownerDocument","document","querySelector","scrollIntoView","behavior","block","role","BackToTop","CssBaseline","AppBar","Toolbar","src","covidLogo","alt","id","Fab","aria-label","ChoroplethMap","states","setStates","setState","statistic","setStatistic","setIndex","choroplethMap","useRef","current","mapData","maxConfirmed","minConfirmed","selector","svg","d3","attr","unemployment","projection","center","scale","translate","path","domain","append","Math","floor","cells","from","keys","legendLinear","legendColor","shapeWidth","titleWidth","genLength","generatedLabels","labelDelimiter","n","n1","n2","orient","select","call","promises","Promise","all","then","india","index","set","toLowerCase","selectAll","topojson","objects","features","enter","d","properties","st_nm","on","parentNode","appendChild","parseFloat","toTitleCase","str","split","charAt","toUpperCase","slice","join","animationDelay","innerWidth","viewBox","preserveAspectRatio","ref","Row","fontWeight","Table","setCount","sortColumn","isAscending","sortData","setSortData","summary","handleSort","e","currentsortColumn","currentTarget","getAttribute","FineprintBottom","useMemo","s","StateData1","StateData2","value1","value2","App","this","Container","Box","my","CountryPicker","Cards","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7999caac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\",\"mainTitle\":\"Cards_mainTitle__2c2XD\",\"countCard\":\"Cards_countCard__1p0aQ\",\"newCard\":\"Cards_newCard__31UFl\",\"refreshDate\":\"Cards_refreshDate__3Q8K4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\nconst apiUrl = 'https://api.covid19india.org';\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    return error;\n  }\n};\n\n// export const fetchDailyData = async () => {\n//   try {\n//     const { data } = await axios.get(`${url}/daily`);\n\n//     return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\n//   } catch (error) {\n//     return error;\n//   }\n// };\n\nexport const fetchCountryData = async (country) => {\n  let changeableUrl = !country ? url : `${url}/countries/${country}`;\n  try {\n      const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n      return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n      console.log(\"Error 1\", error);\n  }\n}\n\nexport const fetchDailyData = async () => {\n  try {\n      const { data } = await axios.get(`${url}/daily`);\n      const modifiedData = data.map(dailyData => ({\n          confirmed: dailyData.confirmed.total,\n          deaths: dailyData.deaths.total,\n          date: dailyData.reportDate\n      }));\n      return modifiedData;\n  } catch (error) {\n      console.log(\"Error 2\", error)\n  }\n}\n\nexport const fetchCountries = async () => {\n  try {\n    const { data: { countries } } = await axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name);\n  } catch (error) {\n    return error;\n  }\n};\n\n\nexport const fetchIndiaData = async () => {\n  try {\n      const {data : {statewise}}  = await axios.get(`${apiUrl}/data.json`);\n      // const stateData = data.filter((state) => state.state === \"Tamil Nadu\")\n      const stateData = statewise.filter((a, b) => a.state!=='Total')\n          .sort((a, b) => parseInt(b.confirmed) - parseInt(a.confirmed))\n          .map(({ state, confirmed, active, recovered,\n              deaths, lastupdatedtime, deltaconfirmed, deltadeaths, deltarecovered}) => {\n              return {\n                  stateName: state,\n                  confirmed: parseInt(confirmed),\n                  active: parseInt(active),\n                  recovered: parseInt(recovered),\n                  deaths: parseInt(deaths),\n                  deltaconfirmed: parseInt(deltaconfirmed),\n                  deltarecovered: parseInt(deltarecovered),\n                  deltadeaths: parseInt(deltadeaths),\n                  lastUpdated: lastupdatedtime\n              }\n          });\n      const totData = statewise.filter((a, b) => a.state==='Total')\n          .map(({  confirmed, recovered,\n              deaths, deltaconfirmed, deltadeaths, deltarecovered}) => {\n                  return {\n                      confirmed: {value: parseInt(confirmed)},\n                      recovered: {value: parseInt(recovered)},\n                      deaths: {value: parseInt(deaths)},\n                      deltaconfirmed: parseInt(deltaconfirmed),\n                      deltarecovered: parseInt(deltarecovered),\n                      deltadeaths: parseInt(deltadeaths),\n                  }\n              });\n      return { stateData, totData };\n  } catch (error) {\n      console.log(\"Error 3\", error);\n  }\n}\n\nexport const fetchIndiaGraphData = async () => {\n  try {\n      const {data : {cases_time_series}}  = await axios.get(`${apiUrl}/data.json`);\n      // const stateData = data.filter((state) => state.state === \"Tamil Nadu\")\n      const graphData = cases_time_series\n          .map(({ dailyconfirmed, dailydeceased, dailyrecovered, date}) => {\n              return {\n                  date,\n                  confirmed: parseInt(dailyconfirmed),\n                  recovered: parseInt(dailyrecovered),\n                  deaths: parseInt(dailydeceased),\n              }\n          });\n      return graphData;\n  } catch (error) {\n      console.log(\"Error 4\", error);\n  }\n}","import EjectRoundedIcon from '@material-ui/icons/EjectRounded';\nimport React from 'react';\nimport CountUp from 'react-countup';\nimport './Delta.css';\n\n\nconst Delta = ({ inpCnt, color, size, fromCard }) => {\n    return (\n        <>\n            <div className={fromCard ? `space` : null}>\n            <span className={`delta-data-${color} delta-data-${size}`}>\n                <EjectRoundedIcon fontSize=\"small\" className={fromCard ? `delta-data-${size} delta-data-icon-${size}` :\n                `delta-data-${size} delta-data-icon-${size} space1 tableSpace`\n                } />\n                <CountUp start={0} end={inpCnt ? inpCnt : 0} duration={2.5} separator=\",\" />{' '}\n            </span>\n            </div>\n        </>\n    );\n}\n\nexport default Delta;","import { Card, CardContent, Grid, Typography } from '@material-ui/core';\nimport cx from 'classnames';\nimport React, { useState } from 'react';\nimport CountUp from 'react-countup';\nimport Delta from '../Delta/Delta';\nimport styles from './Cards.module.css';\n\nconst Info = ({ name, value, subHead, deltaconfirmed, deltaColor }) => {\n  const [raised, setRaised] = useState(false);\n\n\n  const onMouseOver = () => {\n    setRaised(true);\n  }\n\n  const onMouseOut = () => {\n    setRaised(false);\n  }\n\n  function temperatureClassname(temp){\n  \n    switch (temp) {\n      case 'Infected': return cx(styles.card, styles.infected, styles.newCard)\n      case 'Recovered': return cx(styles.card, styles.recovered, styles.newCard)\n      case 'Deaths': return cx(styles.card, styles.deaths, styles.newCard)\n      default : return cx(styles.card, styles.infected, styles.newCard)\n    }\n  }\n\n  function nFormatter(num, digits) {\n    var si = [\n      { value: 1, symbol: \"\" },\n      { value: 1E3, symbol: \"k\" },\n      { value: 1E6, symbol: \"M\" },\n      { value: 1E9, symbol: \"B\" },\n      { value: 1E12, symbol: \"T\" },\n      { value: 1E15, symbol: \"P\" },\n      { value: 1E18, symbol: \"E\" }\n    ];\n    var rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n    var i;\n    for (i = si.length - 1; i > 0; i--) {\n      if (num >= si[i].value) {\n        break;\n      }\n    }\n    return (num / si[i].value).toFixed(digits).replace(rx, \"$1\") + si[i].symbol;\n  }\n\n  return (\n    <>\n      <Grid item xs={12} md={3} >\n        <Card \n        onMouseOver={() => onMouseOver()}\n        onMouseOut={() => onMouseOut()}\n        raised={raised}\n        className={temperatureClassname(name)}\n        >\n        <CardContent>\n          <Typography variant='h2' gutterBottom className={cx(styles.mainTitle)}>\n            {name}\n          </Typography>\n          <Typography variant=\"h1\" component=\"h1\" gutterBottom className={cx(styles.countCard)}>\n            <CountUp start={0} end={value} duration={1} separator=\",\" />\n            <p>~ {nFormatter(value, 1)}</p>\n          </Typography>\n          {/* <Typography color=\"textSecondary\" gutterBottom>\n            {new Date(date).toDateString()}\n          </Typography> */}\n          <Typography variant=\"body2\" component=\"p\">\n            {subHead}\n          </Typography>\n          {deltaconfirmed > 0 ? \n          <Delta inpCnt={deltaconfirmed} color={deltaColor} size='med' fromCard={true}/>\n          : null}\n        </CardContent>\n        </Card>\n      </Grid>\n    </>\n  );\n};\nexport default Info;\n","import { Grid, Typography } from '@material-ui/core';\nimport React from 'react';\nimport styles from './Cards.module.css';\nimport IndividualCard from './IndividualCard';\n\nconst cardObj = [\n  {\n    name: 'Infected',\n    subhead: 'Number of active cases of COVID-19.', \n  },\n  {\n    name: 'Recovered',\n    subhead: 'Number of recoveries from COVID-19.',\n  },\n  {\n    name: 'Deaths',\n    subhead: 'Number of deaths caused by COVID-19.',\n  },\n]\n\n\nconst Info = ({ data }) => {\n\n  const { confirmed, recovered, deaths, lastUpdate, deltaconfirmed, deltadeaths, deltarecovered } \n            = (data && data.totData) ? data.totData[0] : data;\n\n  if (!confirmed) {\n    return 'Loading...';\n  }\n\n  const cardsRender =  \n    cardObj.map((card, i) => {\n    let cardValue = 0;\n    let delta = 0;\n    let dColor = 'grey';\n    if(card.name === 'Infected') {\n      cardValue = confirmed.value; \n      delta = deltaconfirmed;\n      dColor = 'blue';\n    }  \n    else if (card.name === 'Recovered') {\n      cardValue = recovered.value;\n      delta = deltarecovered;\n      dColor = 'green';\n    }\n    else if (card.name === 'Deaths') {\n      cardValue = deaths.value  \n      delta = deltadeaths;\n      dColor = 'red';\n    }\n    else {\n      cardValue = 0;\n      delta = 0;\n      dColor = 'grey';\n    }\n    return (\n      <React.Fragment key={i}>\n        <IndividualCard name={card.name} value={cardValue} subHead={card.subhead} deltaconfirmed={delta} deltaColor={dColor}/>\n      </React.Fragment>\n    )\n    }\n    )\n\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        { lastUpdate && <Grid item xs={12} >\n          <Typography color=\"textSecondary\" gutterBottom className={styles.refreshDate}>\n              Data last refreshed: {new Date(lastUpdate).toDateString()}\n          </Typography>\n        </Grid>}\n        {cardsRender}\n      </Grid>\n    </div>\n  );\n};\nexport default Info;\n","import React from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\n\n// const Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n//   const [dailyData, setDailyData] = useState({});\n//   const [graphData, setGraphData] = useState([]);\n\n//   useEffect(() => {\n//     const fetchMyAPI = async () => {\n//       let initialDailyData = {};\n//       if(country === 'India') {\n//         console.log(\"Set India data\");\n//         const fetchData = async () => {\n//             setDailyData(await fetchIndiaData());\n//         }\n//         fetchData();\n//         const fetchGraphData = async () => {\n//             setGraphData(await fetchIndiaGraphData());\n//         }\n//         fetchGraphData();\n//       }\n//       initialDailyData = await fetchDailyData();\n\n//       setDailyData(initialDailyData);\n//     };\n\n//     fetchMyAPI();\n//   }, [country]);\n\n//   const barChart = (\n//     confirmed ? (\n//       <Bar\n//         data={{\n//           labels: ['Infected', 'Recovered', 'Deaths'],\n//           datasets: [\n//             {\n//               label: 'People',\n//               backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n//               data: [confirmed.value, recovered.value, deaths.value],\n//             },\n//           ],\n//         }}\n//         options={{\n//           legend: { display: false },\n//           title: { display: true, text: `Current state in ${country}` },\n//         }}\n//       />\n//     ) : null\n//   );\n\n//   const lineChart = (\n//     dailyData[0] ? (\n//       <Line\n//         data={{\n//           labels: dailyData.map(({ date }) => date),\n//           datasets: [{\n//             data: dailyData.map((data) => data.confirmed),\n//             label: 'Infected',\n//             borderColor: '#3333ff',\n//             fill: true,\n//           }, {\n//             data: dailyData.map((data) => data.deaths),\n//             label: 'Deaths',\n//             borderColor: 'red',\n//             backgroundColor: 'rgba(255, 0, 0, 0.5)',\n//             fill: true,\n//           },\n//           ],\n//         }}\n//       />\n//     ) : null\n//   );\n\n//   return (\n//     <div className={styles.container}>\n//       {country ? barChart : lineChart}\n//     </div>\n//   );\n// };\n\n// export default Chart;\n\n\nconst Chart = ({ graphData, country }) => {\n\n  let dataset = [], title = '', isGraphDataArr = Array.isArray(graphData);\n\n  if (country === 'India' && isGraphDataArr && graphData) {\n      dataset = [{\n          data: isGraphDataArr ? graphData.map(({ confirmed }) => confirmed) : [],\n          label: 'Confirmed',\n          borderColor: 'rgba(0, 0, 255, 0.5)',\n          fill: true\n      }, {\n          data: isGraphDataArr ? graphData.map(({ recovered }) => recovered) : [],\n          label: 'Recovered',\n          borderColor: 'rgba(0, 255, 0, 0.5)',\n          fill: true\n      }, {\n          data: isGraphDataArr ? graphData.map(({ deaths }) => deaths) : [],\n          label: 'Deceased',\n          borderColor: 'rgba(255, 0, 0, 0.5)',\n          fill: true\n      }];\n      title = `Daily Cases Timeline`;\n  } else if (isGraphDataArr && graphData) {\n      dataset = [{\n          data: graphData.map(({ confirmed }) => confirmed),\n          label: 'Confirmed',\n          borderColor: 'rgba(0, 0, 255, 0.5)',\n          fill: true\n      }, {\n          data: graphData.map(({ deaths }) => deaths),\n          label: 'Deceased',\n          borderColor: 'rgba(255, 0, 0, 0.5)',\n          fill: true\n      }];\n      title = `Daily Cases Growth`;\n  } else if (!isGraphDataArr && graphData && graphData.confirmed ) {\n      dataset = [{\n          label: 'People',\n          backgroundColor: [\n              '#007bff99',\n              'rgba(0, 255, 0, 0.5)',\n              'rgba(255, 0, 0, 0.5)'],\n          data: [graphData.confirmed.value, graphData.recovered.value, graphData.deaths.value]\n      }];\n      title = `Current status in ${country}`;\n  }\n\n  const lineChart = (\n      graphData && graphData[0] ?\n          <Line data={{\n              labels: graphData.map(({ date }) => date),\n              datasets: dataset\n          }} \n          options={{\n              title: { display: true, text: title },\n              maintainAspectRatio: false\n          }}/> : null\n  );\n\n  const barChart = graphData && graphData.confirmed ?\n      <Bar\n          data={{\n              labels: ['Confirmed', 'Recovered', 'Deceased'],\n              datasets: dataset\n          }}\n          options={{\n              legend: { display: false },\n              title: { display: true, text: title },\n              maintainAspectRatio: false\n          }} /> : null;\n\n  return (\n      <div className={styles.container}>\n          {country ? (country === 'India' ? lineChart : barChart) : null}\n          {!country ? lineChart : null}\n          {/* {country === 'India' ? lineChart : null} */}\n      </div>\n  );\n}\n\nexport default Chart;\n","import { FormControl } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { fetchCountries } from '../../api';\nimport styles from './CountryPicker.module.css';\n\nlet arr = [{ value: '', label: 'Global'}];\n\nconst Countries = ({ handleCountryChange }) => {\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      let count = await fetchCountries();\n      var len = count.length;\n      for (var i = 0; i < len; i++) {\n        arr.push({\n            value: count[i],\n            label: count[i],\n        });\n      }\n    await setCountries(arr);\n    };\n\n    fetchAPI();\n  }, []);\n\n  const handleChange = (selectedOption) => {\n      handleCountryChange(selectedOption.value);\n  }\n\n  return (\n    <>\n    <FormControl className={styles.formControl}>\n      <Select\n      className=\"basic-single\"\n      defaultValue={''}\n      placeholder={'Global'}\n      isSearchable={true}\n      onChange={handleChange}\n      name=\"color\"\n      options={countries}\n      style={{width: '50%'}}  \n      />\n    </FormControl>\n    </>\n  );\n};\n\nexport default Countries;\n","import { Typography } from '@material-ui/core';\nimport React from 'react';\nimport './Footer.css';\n\n\nconst Footer = () => {\n    return (\n        <div className=\"footer-container\">\n            <Typography color=\"textSecondary\" display=\"block\" align='center'>\n                Created with <span style={{color: '#e25555'}}>&hearts;</span> by <a href=\"https://virtuosArs.github.io/ARSOnePage\" target=\"_blank\" rel=\"noopener noreferrer\">Ankush Sankhe</a>\n            </Typography>\n            <Typography  color=\"textSecondary\" display=\"block\" align='center'>\n                Data Sources:\n                &nbsp;|&nbsp;<a href=\"https://api.covid19india.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Covid19India</a>\n                &nbsp;|&nbsp;<a href=\"https://github.com/mathdroid/covid-19-api\" target=\"_blank\" rel=\"noopener noreferrer\">Mathdroid</a>\n            </Typography>\n            <Typography  color=\"textSecondary\" display=\"block\" align='center'>\n                UI Inspiration by:\n                &nbsp;|&nbsp;<a href=\"https://github.com/covid19india/covid19india-react\" target=\"_blank\" rel=\"noopener noreferrer\">Covid19India</a>\n                &nbsp;|&nbsp;<a href=\"https://github.com/adrianhajdin/project_corona_tracker\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript Mastery</a>\n            </Typography>\n        </div>\n    );\n}\n\nexport default Footer;","import { makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TableSortLabel, Typography } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport CountUp from 'react-countup';\nimport { getComparator, stableSort } from '../../utils';\nimport Delta from '../Delta/Delta';\nimport './DataTable.css';\n\n\nconst useStyles = makeStyles((theme) => ({\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nconst DataTable = ({ data, value, index, country }) => {\n    const classes = useStyles();\n    const [orderBy, setOrderBy] = useState('confirmed');\n    const [order, setOrder] = useState('desc');\n    // const [lastUpdate, setLastUpdate] = useState('');\n    let firstLabel = 'District', lastUpdate ='';\n\n    // if (value !== index) return null;\n    if (country === 'India') {\n        firstLabel = 'State/UT';\n        lastUpdate = '';\n        data = data && data.stateData ? data.stateData : [];\n    } else if (country === '') {\n        firstLabel = 'Country';\n        lastUpdate = '';\n    }\n\n    const headCells = [\n        { id: 'stateName', numeric: false, disablePadding: false, label: firstLabel },\n        { id: 'confirmed', numeric: true, disablePadding: false, label: 'Confirmed' },\n        { id: 'active', numeric: true, disablePadding: false, label: 'Active' },\n        { id: 'recovered', numeric: true, disablePadding: false, label: 'Recovered' },\n        { id: 'deaths', numeric: true, disablePadding: false, label: 'Deceased' }\n    ];\n\n    const tableData = data && !data.length ? (\n        <TableRow>\n            <TableCell align=\"center\" colSpan={5}>\n                <Typography variant=\"button\" display=\"block\" align='center'>\n                    Loading...\n                </Typography>\n            </TableCell>\n        </TableRow>) :\n        stableSort(data, getComparator(order, orderBy))\n            .map(({ stateName, confirmed, active, recovered, deaths, lastUpdated, \n                    deltaconfirmed, deltadeaths, deltarecovered }) => {\n                if (!lastUpdate) lastUpdate = lastUpdated;\n                return (\n                    <TableRow key={stateName} hover>\n                        <TableCell component=\"th\" scope=\"row\" className=\"table-cell\">\n                            {stateName}\n                        </TableCell>\n                        <TableCell align=\"right\" className=\"table-cell\">\n                            {deltaconfirmed > 0 ? <Delta inpCnt={deltaconfirmed} color='red' size='small'/> : null}\n                            <CountUp start={0} end={confirmed ? confirmed : 0} duration={1} separator=\",\" />\n                        </TableCell>\n                        <TableCell align=\"right\" className=\"table-cell\">\n                            <CountUp start={0} end={active ? active : 0} duration={1} separator=\",\" />\n                        </TableCell>\n                        <TableCell align=\"right\" className=\"table-cell\">\n                            {deltarecovered > 0 ? <Delta inpCnt={deltarecovered} color='green' size='small'/> : null}\n                            <CountUp start={0} end={recovered ? recovered : 0} duration={1} separator=\",\" />\n                        </TableCell>\n                        <TableCell align=\"right\" className=\"table-cell\">\n                            {deltadeaths > 0 ? <Delta inpCnt={deltadeaths} color='grey' size='small'/> : null}\n                            <CountUp start={0} end={deaths ? deaths : 0} duration={1} separator=\",\" />\n                        </TableCell>\n                        {/* <TableCell align=\"right\" className=\"table-cell\">{active}</TableCell>\n                        <TableCell align=\"right\" className=\"table-cell\">{recovered}</TableCell>\n                        <TableCell align=\"right\" className=\"table-cell\">{deaths}</TableCell> */}\n                    </TableRow>\n                )\n            });\n\n    const lastUpdatedSec = lastUpdate ? (<Typography variant=\"caption\" display=\"block\" align='center'>\n        Last Updated at {lastUpdate}\n    </Typography>) : null;\n\n    const handleSort = (property) => (event) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    }\n\n    return (\n        <>\n        {/* <div className=\"datatable-container\"> */}\n                {lastUpdatedSec}\n                <div className={classes.tableContainer}>\n                <TableContainer component={Paper}  className={classes.tableContainer}>\n                    <Table stickyHeader  aria-label=\"sticky table\">\n                        <TableHead>\n                            <TableRow>\n                                {headCells.map((headCell) => (\n                                    <TableCell\n                                        key={headCell.id}\n                                        align={headCell.numeric ? 'right' : 'left'}\n                                        padding={headCell.disablePadding ? 'none' : 'default'}\n                                        sortDirection={orderBy === headCell.id ? order : false}\n                                        className=\"table-cell\">\n                                        <TableSortLabel\n                                            active={orderBy === headCell.id}\n                                            direction={orderBy === headCell.id ? order : 'asc'}\n                                            onClick={handleSort(headCell.id)}\n                                            className=\"t-head\"\n                                        >\n                                            {headCell.label}\n                                            {orderBy === headCell.id ? (\n                                                <span className={classes.visuallyHidden}>\n                                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                                </span>\n                                            ) : null}\n                                        </TableSortLabel>\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {tableData}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                </div>\n        {/* </div> */}\n        </>\n    );\n}\n\nexport default DataTable;","import AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Fab from '@material-ui/core/Fab';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport Zoom from '@material-ui/core/Zoom';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport covidLogo from '../../images/image.png';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: 'fixed',\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n  appBar: {\n      backgroundColor: '#fff',\n  },\n  toolBar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  }\n}));\n\nfunction ScrollTop(props) {\n  const { children, window } = props;\n  const classes = useStyles();\n  // Note that you normally won't need to set the window ref as useScrollTrigger\n  // will default to window.\n  // This is only being set here because the demo is in an iframe.\n  const trigger = useScrollTrigger({\n    target: window ? window() : undefined,\n    disableHysteresis: true,\n    threshold: 100,\n  });\n\n  const handleClick = (event) => {\n    const anchor = (event.target.ownerDocument || document).querySelector('#back-to-top-anchor');\n\n    if (anchor) {\n      anchor.scrollIntoView({ behavior: 'smooth', block: 'center' });\n    }\n  };\n\n  return (\n    <Zoom in={trigger}>\n      <div onClick={handleClick} role=\"presentation\" className={classes.root}>\n        {children}\n      </div>\n    </Zoom>\n  );\n}\n\nScrollTop.propTypes = {\n  children: PropTypes.element.isRequired,\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window: PropTypes.func,\n};\n\nexport default function BackToTop(props) {\n    const classes = useStyles();\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar className={classes.appBar}>\n        <Toolbar className={classes.toolBar}>\n          {/* <Typography variant=\"h6\">Covid 19 Live</Typography> */}\n          <img src={covidLogo} alt=\"Covid 19\" height=\"41px\" />\n        </Toolbar>\n      </AppBar>\n      <Toolbar id=\"back-to-top-anchor\" />\n      <ScrollTop {...props}>\n        <Fab color=\"primary\" size=\"small\" aria-label=\"scroll back to top\">\n          <KeyboardArrowUpIcon />\n        </Fab>\n      </ScrollTop>\n    </React.Fragment>\n  );\n}\n","import * as d3 from 'd3';\n// import { queue } from 'd3-queue';\n// import { json } from 'd3-request';\nimport { legendColor } from 'd3-svg-legend';\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as topojson from 'topojson';\n\nfunction ChoroplethMap(props) {\n  const [rendered, setRendered] = useState(false);\n  const [states, setStates] = useState(props.states);\n  const [state, setState] = useState({});\n  const [statistic, setStatistic] = useState({});\n  const [index, setIndex] = useState(1);\n  const choroplethMap = useRef(null);\n\n  useEffect(()=>{\n    if (props.states.length>1 && choroplethMap.current) {\n      mapData(choroplethMap.current);\n      setState(states[0]);\n    }\n  }, [statistic]);\n\n  // useEffect(() => {\n  //   (async () => {\n  //     const data = await d3.json('https://www.covid19india.org/maps/india.json');\n  //     if (statistic && choroplethMap.current) {\n  //       ready(data);\n  //     }\n  //   })();\n  // }, [statistic, ready]);\n\n\n  useEffect(()=>{\n    if (states.length > 1) {\n      let total = 0;\n      let maxConfirmed = parseInt(states[1].confirmed);\n      let minConfirmed = parseInt(states[1].confirmed);\n      for (let i=1; i<states.length; i++) {\n        total+=parseInt(states[i].confirmed);\n        if (parseInt(states[i].confirmed) > parseInt(maxConfirmed)) maxConfirmed = parseInt(states[i].confirmed);\n        if (parseInt(states[i].confirmed) < parseInt(minConfirmed)) minConfirmed = parseInt(states[i].confirmed);\n      }\n      setStatistic({\n        total: total,\n        maxConfirmed: maxConfirmed,\n        minConfirmed: minConfirmed,\n      });\n    }\n  }, [states.length]);\n\n  useEffect(()=>{\n    setStates(props.states);\n  }, [props.states]);\n\n  const handleMouseover = (name) => {\n    states.map((state, index) => {\n      if (state.stateName.toLowerCase()===name.toLowerCase()) {\n        setState(state);\n        setIndex(index);\n      }\n    });\n  };\n\n  const mapData = (selector) => {\n    const svg = d3.select(selector);\n    const width = +svg.attr('width');\n    const height = +svg.attr('height');\n\n    const unemployment = d3.map();\n\n    const projection = d3.geoMercator()\n        .center([78.9, 19])\n        .scale(1000)\n        .translate([width/2, height/2]);\n\n    const path = d3.geoPath(projection);\n\n    // Colorbar\n    const maxInterpolation = 0.8;\n\n    function label({i, genLength, generatedLabels, labelDelimiter}) {\n      if (i === genLength - 1) {\n        const n = Math.floor(generatedLabels[i]);\n        return `${n}+`;\n      } else {\n        const n1 = Math.floor(generatedLabels[i]);\n        const n2 = Math.floor(generatedLabels[i+1]);\n        return `${n1} - ${n2}`;\n      }\n    }\n\n    const color = d3.scaleSequential(d3.interpolateReds)\n        .domain([0, statistic.maxConfirmed / maxInterpolation]);\n\n    svg.append('g')\n        .attr('class', 'legendLinear')\n        .attr('transform', 'translate(1, 375)');\n\n    const numCells = 6;\n    const delta = Math.floor(statistic.maxConfirmed / (numCells - 1));\n    const cells = Array.from(Array(numCells).keys()).map((i) => i * delta);\n\n    const legendLinear = legendColor()\n        .shapeWidth(50)\n        .cells(cells)\n        .titleWidth(3)\n        .labels(label)\n        .title('Confirmed Cases')\n        .orient('vertical')\n        .scale(color);\n\n    svg.select('.legendLinear')\n        .call(legendLinear);\n\n\n    // var q = d3.queue()\n    const promises = [\n      // d3.json('india.json'),\n      d3.json('https://www.covid19india.org/maps/india.json'),\n      // queue().defer(json, \"/india.json\")\n      // d3.json(indiaMap.india),\n    ];\n\n    // const promises = [\n    //   // d3.json(JSON.parse('/india.json')),\n    //     d3.json(JSON.parse(indiaMap.india)),\n    //   ];\n  \n    Promise.all(promises).then(ready);\n\n    // d3.json('india.json').then((res) => {\n    //   console.log(\"Res-\", res.json());\n    // })\n\n    function ready([india]) {\n      states.map((state, index) => {\n        unemployment.set(state.stateName.toLowerCase(), state.confirmed);\n      });\n\n      // console.log(\"STA===\", unemployment);\n\n      svg.append('g')\n          .attr('class', 'states')\n          .selectAll('path')\n          // .data(topojson.feature(india, india.objects.india).features)\n          .data(topojson.feature(india, india.objects[\"india-states\"]).features)\n          .enter().append('path')\n          .attr('fill', function(d) {\n            const n = unemployment.get(d.properties.st_nm.toLowerCase());\n            return d3.interpolateReds(d.confirmed = (n>0)*0.05 + n/statistic.maxConfirmed*maxInterpolation);\n          })\n          .attr('d', path)\n          .attr('pointer-events', 'all')\n          .on('mouseenter', (d) => {\n            handleMouseover(d.properties.st_nm);\n            const target = d3.event.target;\n            d3.select(target.parentNode.appendChild(target)).attr('stroke', '#ff073a').attr('stroke-width', 2);\n          })\n          .on('mouseleave', (d) => {\n            const n = unemployment.get(d.properties.st_nm.toLowerCase());\n            const target = d3.event.target;\n            d3.select(target).attr('fill', d3.interpolateReds(d.confirmed = (n>0)*0.05 + n/statistic.maxConfirmed*maxInterpolation)).attr('stroke', 'None');\n          })\n          .style('cursor', 'pointer')\n          .append('title')\n          .text(function(d) {\n            return parseFloat(100*(unemployment.get(d.properties.st_nm.toLowerCase())/statistic.total)).toFixed(2) + '% from ' + toTitleCase(d.properties.st_nm);\n          });\n\n      svg.append('path')\n          .attr('stroke', '#ff073a20')\n          .attr('fill', 'none')\n          .attr('stroke-width', 2)\n          .attr('d', path(topojson.mesh(india, india.objects[\"india-states\"])));\n    };\n  };\n\n  const toTitleCase = (str) => {\n    str = str.toLowerCase().split(' ');\n    for (let i = 0; i < str.length; i++) {\n      str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\n    }\n    return str.join(' ');\n  };\n\n  return (\n    <div className=\"ChoroplethMap cMap fadeInUp\" style={{animationDelay: '1.2s'}}>\n      <h1 className=\"header\">Map</h1>\n      <h6 className=\"header\">Hover over a state for more details</h6>\n      <div className=\"svg-parent\">\n        <svg id=\"chart\" width=\"650\" height={window.innerWidth <= 479 ? 650: 750} viewBox={`0 0 650 ${window.innerWidth <= 479 ? 650: 750}`} preserveAspectRatio=\"xMidYMid meet\" ref={choroplethMap}></svg>\n      </div>\n\n      <div className=\"map-stats\">\n        <h4>{state.stateName}</h4>\n\n        <div className=\"stats\">\n          <h5>Confirmed</h5>\n          <div className=\"stats-bottom\">\n            <h1>{state.confirmed}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n\n        <div className=\"stats is-blue\">\n          <h5>Active</h5>\n          <div className=\"stats-bottom\">\n            <h1>{state.active}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n\n        <div className=\"stats is-green\">\n          <h5>Recovered</h5>\n          <div className=\"stats-bottom\">\n            <h1>{state.recovered}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n\n        <div className=\"stats is-gray\">\n          <h5>Deceased</h5>\n          <div className=\"stats-bottom\">\n            <h1>{state.deaths}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default ChoroplethMap;\n","import React, { useEffect, useState } from 'react';\n\nfunction Row(props) {\n  const [state, setState] = useState(props.state);\n\n  useEffect(()=>{\n    setState(props.state);\n  }, [props.state]);\n\n  return (\n    <tr className={props.total ? 'is-total' : ''}>\n      <td style={{fontWeight: 600}}>{state.stateName}</td>\n      <td>{state.confirmed}</td>\n      <td style={{color: parseInt(state.active)===0 ? '#B5B5B5' : 'inherit'}}>{parseInt(state.active)===0 ? '-' : state.active}</td>\n      <td style={{color: parseInt(state.recovered)===0 ? '#B5B5B5' : 'inherit'}}>{parseInt(state.recovered)===0 ? '-' : state.recovered}</td>\n      <td style={{color: parseInt(state.deaths)===0 ? '#B5B5B5' : 'inherit'}}>{parseInt(state.deaths)===0 ? '-' : state.deaths}</td>\n    </tr>\n  );\n}\n\nexport default Row;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport * as Icon from 'react-feather';\nimport Row from './row';\n\n\nfunction Table(props) {\n  const [states, setStates] = useState(props.states);\n  const [count, setCount] = useState(0);\n  const [sortData, setSortData] = useState({\n    sortColumn: 'confirmed',\n    isAscending: false,\n  });\n\n  useEffect(()=>{\n    if (props.summary===true) {\n      setStates(props.states.slice(0, 9));\n    } else {\n      setStates(props.states);\n    }\n  }, [props.states]);\n\n  useEffect(()=>{\n    if (states.length>0) {\n      let length = 0;\n      props.states.map((state, i) => {\n        if (i!==0 && state.confirmed>0) length+=1;\n        if (i===props.states.length-1) setCount(length);\n      });\n    }\n  }, [states.length]);\n\n  const doSort = (e, props) => {\n    // const totalRow = states.splice(0, 1);\n    // console.log(\"Sort==\", totalRow);\n    {/* console.log(totalRow);*/}\n    states.sort((StateData1, StateData2) => {\n      const sortColumn = sortData.sortColumn;\n      let value1 = StateData1[sortColumn];\n      let value2 = StateData2[sortColumn];\n\n      if (sortColumn != 'state') {\n        value1 = parseInt(StateData1[sortColumn]);\n        value2 = parseInt(StateData2[sortColumn]);\n      }\n\n      if (sortData.isAscending) {\n        return value1 > value2? 1 : -1;\n      } else {\n        return value1 > value2? -1 : 1;\n      }\n    });\n    // states.unshift(totalRow[0]);\n  };\n\n  const handleSort = (e, props) => {\n    const currentsortColumn = e.currentTarget.querySelector('abbr').getAttribute('title').toLowerCase();\n    setSortData({\n      sortColumn: currentsortColumn,\n      isAscending: sortData.sortColumn == currentsortColumn? !sortData.isAscending : sortData.sortColumn === 'state',\n    });\n  };\n\n  const FineprintBottom = useMemo(\n    () => (\n      <h5 className=\"table-fineprint fadeInUp\" style={{animationDelay: '1s'}}>\n        {states.slice(1).filter((s) => s && s.confirmed > 0).length} States/UTS\n        Affected\n      </h5>\n    ),\n    [states]\n  );\n\n  doSort();\n\n  return (\n      <>\n      {states && FineprintBottom}\n    <table className=\"table fadeInUp\" style={{animationDelay: '1s'}}>\n      <thead>\n        <tr>\n          <th className=\"state-heading\" onClick={(e) => handleSort(e, props)} >\n            <div className='heading-content'>\n              <abbr title=\"State\">\n                  State/UT\n              </abbr>\n              <div style={{display: sortData.sortColumn === 'state' ? 'initial': 'none'}}><Icon.Maximize2/></div>\n            </div>\n          </th>\n          <th onClick={(e) => handleSort(e, props)}>\n            <div className='heading-content'>\n              <abbr className={`${window.innerWidth <=769 ? 'is-cherry' : ''}`} title=\"Confirmed\">{window.innerWidth <=769 ? window.innerWidth <=375 ? 'C' : 'Cnfrmd' : 'Confirmed'}</abbr>\n              <div style={{display: sortData.sortColumn === 'confirmed' ? 'initial': 'none'}}><Icon.Maximize2/></div>\n            </div>\n          </th>\n          <th onClick={(e) => handleSort(e, props)}>\n            <div className='heading-content'>\n              <abbr className={`${window.innerWidth <=769 ? 'is-blue' : ''}`} title=\"Active\">{window.innerWidth <=769 ? window.innerWidth <=375 ? 'A' : 'Actv' : 'Active'}</abbr>\n              <div style={{display: sortData.sortColumn === 'active' ? 'initial': 'none'}}><Icon.Maximize2/></div>\n            </div>\n          </th>\n          <th onClick={(e) => handleSort(e, props)}>\n            <div className='heading-content'>\n              <abbr className={`${window.innerWidth <=769 ? 'is-green' : ''}`} title=\"Recovered\">{window.innerWidth <=769 ? window.innerWidth <=375 ? 'R' : 'Rcvrd' : 'Recovered'}</abbr>\n              <div className={ sortData.sortColumn === 'recovered'? 'sort-black' : ''}></div>\n              <div style={{display: sortData.sortColumn === 'recovered' ? 'initial': 'none'}}><Icon.Maximize2/></div>\n            </div>\n          </th>\n          <th onClick={(e) => handleSort(e, props)}>\n            <div className='heading-content'>\n              <abbr className={`${window.innerWidth <=769 ? 'is-gray' : ''}`} title=\"Deaths\">{window.innerWidth <=769 ? window.innerWidth <=375 ? 'D' : 'DCSD' : 'Deaths'}</abbr>\n              <div style={{display: sortData.sortColumn === 'deaths' ? 'initial': 'none'}}><Icon.Maximize2/></div>\n            </div>\n          </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          states.map((state, index) => {\n            {/* if (index!==0 && state.confirmed>0) { */}\n              return (\n                <Row key={index} state={state} total={false}/>\n              );\n            {/* } */}\n          })\n        }\n\n        {states.length > 1 && props.summary===false && <Row key={0} state={states[0]} total={true}/>}\n      </tbody>\n\n    </table>\n    {states && FineprintBottom}\n    </>\n  );\n}\n\nexport default Table;\n","import Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport React from 'react';\nimport { fetchCountryData, fetchDailyData, fetchIndiaData, fetchIndiaGraphData } from './api/';\nimport styles from './App.module.css';\nimport './App.scss';\nimport { Cards, Chart, ChoroplethMap, CountryPicker, Footer, Header, Table } from './components';\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    graphData: [],\n    country: '',\n  }\n\n  async componentDidMount() {\n    // const data = await fetchData();\n    const data = await fetchCountryData();\n    const graphData = await fetchDailyData();\n\n    this.setState({ data, graphData });\n  }\n\n  handleCountryChange = async (country) => {\n    let data = {};\n    let graphData = [];\n\n    if(country === 'India') {\n      data = await fetchIndiaData();\n      graphData = await fetchIndiaGraphData();\n    }\n    else if(country !== 'India' && country) {\n      data = await fetchCountryData(country);\n      graphData = await fetchCountryData(country);\n    }\n    else {\n      data = await fetchCountryData();\n      graphData = await fetchDailyData();\n    }\n    await this.setState({ data, country , graphData });\n  }\n\n  render() {\n    const { data, country, graphData } = this.state;\n\n    return (\n      <>\n      <div className=\"App\">\n        <Header />\n        <Container>\n          <Box my={2}>\n            <div className={styles.container}>\n              {/* <img className={styles.image} src={image} alt=\"COVID-19\" /> */}\n              <CountryPicker handleCountryChange={this.handleCountryChange} />\n              <Cards data={data} />\n              {/* <Chart data={data} country={country} /> */}\n              {graphData && country !== 'India' && <Chart graphData={graphData} country={country} />}\n              {\n                country === 'India' && graphData && data &&\n                <>\n                {/* <DataTable data={data} country={country}/> */}\n                <div className=\"Home\">\n                <div className=\"home-left\">\n                  {data && data.stateData && <ChoroplethMap states={data.stateData}/> }\n                </div>\n                <div className=\"home-right\">\n                  <Table states={data.stateData} />\n                </div>\n                </div>\n                <Chart graphData={graphData} country={country} />\n                </>\n              } \n            </div>\n          </Box>\n        </Container>\n        {graphData ? <Footer /> : <>\n          <p>Loading...</p>\n        </>\n        }\n      </div>\n      </>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}